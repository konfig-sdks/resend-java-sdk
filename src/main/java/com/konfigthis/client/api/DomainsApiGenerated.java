/*
 * Resend
 * Resend is the email platform for developers.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateDomainRequest;
import com.konfigthis.client.model.CreateDomainResponse;
import com.konfigthis.client.model.DeleteDomainResponse;
import com.konfigthis.client.model.Domain;
import com.konfigthis.client.model.ListDomainsResponse;
import com.konfigthis.client.model.UpdateDomainOptions;
import com.konfigthis.client.model.UpdateDomainResponseSuccess;
import com.konfigthis.client.model.VerifyDomainResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DomainsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DomainsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DomainsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewDomainCall(CreateDomainRequest createDomainRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDomainRequest;

        // create path and map variables
        String localVarPath = "/domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewDomainValidateBeforeCall(CreateDomainRequest createDomainRequest, final ApiCallback _callback) throws ApiException {
        return createNewDomainCall(createDomainRequest, _callback);

    }


    private ApiResponse<CreateDomainResponse> createNewDomainWithHttpInfo(CreateDomainRequest createDomainRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewDomainValidateBeforeCall(createDomainRequest, null);
        Type localVarReturnType = new TypeToken<CreateDomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewDomainAsync(CreateDomainRequest createDomainRequest, final ApiCallback<CreateDomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewDomainValidateBeforeCall(createDomainRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateDomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewDomainRequestBuilder {
        private final String name;
        private String region;

        private CreateNewDomainRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set region
         * @param region The region where emails will be sent from. Possible values are us-east-1&#39; | &#39;eu-west-1&#39; | &#39;sa-east-1 (optional, default to us-east-1)
         * @return CreateNewDomainRequestBuilder
         */
        public CreateNewDomainRequestBuilder region(String region) {
            this.region = region;
            return this;
        }
        
        /**
         * Build call for createNewDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateDomainRequest createDomainRequest = buildBodyParams();
            return createNewDomainCall(createDomainRequest, _callback);
        }

        private CreateDomainRequest buildBodyParams() {
            CreateDomainRequest createDomainRequest = new CreateDomainRequest();
            createDomainRequest.name(this.name);
            if (this.region != null)
            createDomainRequest.region(CreateDomainRequest.RegionEnum.fromValue(this.region));
            return createDomainRequest;
        }

        /**
         * Execute createNewDomain request
         * @return CreateDomainResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CreateDomainResponse execute() throws ApiException {
            CreateDomainRequest createDomainRequest = buildBodyParams();
            ApiResponse<CreateDomainResponse> localVarResp = createNewDomainWithHttpInfo(createDomainRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewDomain request with HTTP info returned
         * @return ApiResponse&lt;CreateDomainResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateDomainResponse> executeWithHttpInfo() throws ApiException {
            CreateDomainRequest createDomainRequest = buildBodyParams();
            return createNewDomainWithHttpInfo(createDomainRequest);
        }

        /**
         * Execute createNewDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateDomainResponse> _callback) throws ApiException {
            CreateDomainRequest createDomainRequest = buildBodyParams();
            return createNewDomainAsync(createDomainRequest, _callback);
        }
    }

    /**
     * Create a new domain
     * 
     * @return CreateNewDomainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewDomainRequestBuilder createNewDomain(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateNewDomainRequestBuilder(name);
    }
    private okhttp3.Call getListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getListCall(_callback);

    }


    private ApiResponse<ListDomainsResponse> getListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListDomainsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(final ApiCallback<ListDomainsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListDomainsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {

        private GetListRequestBuilder() {
        }

        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(_callback);
        }


        /**
         * Execute getList request
         * @return ListDomainsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ListDomainsResponse execute() throws ApiException {
            ApiResponse<ListDomainsResponse> localVarResp = getListWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;ListDomainsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListDomainsResponse> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo();
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListDomainsResponse> _callback) throws ApiException {
            return getListAsync(_callback);
        }
    }

    /**
     * Retrieve a list of domains
     * 
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList() throws IllegalArgumentException {
        return new GetListRequestBuilder();
    }
    private okhttp3.Call getSingleDomainCall(String domainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{domain_id}"
            .replace("{" + "domain_id" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleDomainValidateBeforeCall(String domainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getSingleDomain(Async)");
        }

        return getSingleDomainCall(domainId, _callback);

    }


    private ApiResponse<Domain> getSingleDomainWithHttpInfo(String domainId) throws ApiException {
        okhttp3.Call localVarCall = getSingleDomainValidateBeforeCall(domainId, null);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleDomainAsync(String domainId, final ApiCallback<Domain> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleDomainValidateBeforeCall(domainId, _callback);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleDomainRequestBuilder {
        private final String domainId;

        private GetSingleDomainRequestBuilder(String domainId) {
            this.domainId = domainId;
        }

        /**
         * Build call for getSingleDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleDomainCall(domainId, _callback);
        }


        /**
         * Execute getSingleDomain request
         * @return Domain
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Domain execute() throws ApiException {
            ApiResponse<Domain> localVarResp = getSingleDomainWithHttpInfo(domainId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleDomain request with HTTP info returned
         * @return ApiResponse&lt;Domain&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Domain> executeWithHttpInfo() throws ApiException {
            return getSingleDomainWithHttpInfo(domainId);
        }

        /**
         * Execute getSingleDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Domain> _callback) throws ApiException {
            return getSingleDomainAsync(domainId, _callback);
        }
    }

    /**
     * Retrieve a single domain
     * 
     * @param domainId  (required)
     * @return GetSingleDomainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleDomainRequestBuilder getSingleDomain(String domainId) throws IllegalArgumentException {
        if (domainId == null) throw new IllegalArgumentException("\"domainId\" is required but got null");
            

        return new GetSingleDomainRequestBuilder(domainId);
    }
    private okhttp3.Call removeDomainCall(String domainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{domain_id}"
            .replace("{" + "domain_id" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeDomainValidateBeforeCall(String domainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling removeDomain(Async)");
        }

        return removeDomainCall(domainId, _callback);

    }


    private ApiResponse<DeleteDomainResponse> removeDomainWithHttpInfo(String domainId) throws ApiException {
        okhttp3.Call localVarCall = removeDomainValidateBeforeCall(domainId, null);
        Type localVarReturnType = new TypeToken<DeleteDomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeDomainAsync(String domainId, final ApiCallback<DeleteDomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeDomainValidateBeforeCall(domainId, _callback);
        Type localVarReturnType = new TypeToken<DeleteDomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveDomainRequestBuilder {
        private final String domainId;

        private RemoveDomainRequestBuilder(String domainId) {
            this.domainId = domainId;
        }

        /**
         * Build call for removeDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeDomainCall(domainId, _callback);
        }


        /**
         * Execute removeDomain request
         * @return DeleteDomainResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DeleteDomainResponse execute() throws ApiException {
            ApiResponse<DeleteDomainResponse> localVarResp = removeDomainWithHttpInfo(domainId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeDomain request with HTTP info returned
         * @return ApiResponse&lt;DeleteDomainResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteDomainResponse> executeWithHttpInfo() throws ApiException {
            return removeDomainWithHttpInfo(domainId);
        }

        /**
         * Execute removeDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteDomainResponse> _callback) throws ApiException {
            return removeDomainAsync(domainId, _callback);
        }
    }

    /**
     * Remove an existing domain
     * 
     * @param domainId  (required)
     * @return RemoveDomainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RemoveDomainRequestBuilder removeDomain(String domainId) throws IllegalArgumentException {
        if (domainId == null) throw new IllegalArgumentException("\"domainId\" is required but got null");
            

        return new RemoveDomainRequestBuilder(domainId);
    }
    private okhttp3.Call updateExistingDomainCall(String domainId, UpdateDomainOptions updateDomainOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDomainOptions;

        // create path and map variables
        String localVarPath = "/domains/{domain_id}"
            .replace("{" + "domain_id" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingDomainValidateBeforeCall(String domainId, UpdateDomainOptions updateDomainOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling updateExistingDomain(Async)");
        }

        return updateExistingDomainCall(domainId, updateDomainOptions, _callback);

    }


    private ApiResponse<UpdateDomainResponseSuccess> updateExistingDomainWithHttpInfo(String domainId, UpdateDomainOptions updateDomainOptions) throws ApiException {
        okhttp3.Call localVarCall = updateExistingDomainValidateBeforeCall(domainId, updateDomainOptions, null);
        Type localVarReturnType = new TypeToken<UpdateDomainResponseSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateExistingDomainAsync(String domainId, UpdateDomainOptions updateDomainOptions, final ApiCallback<UpdateDomainResponseSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingDomainValidateBeforeCall(domainId, updateDomainOptions, _callback);
        Type localVarReturnType = new TypeToken<UpdateDomainResponseSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateExistingDomainRequestBuilder {
        private final String domainId;
        private Boolean clickTracking;
        private Boolean openTracking;

        private UpdateExistingDomainRequestBuilder(String domainId) {
            this.domainId = domainId;
        }

        /**
         * Set clickTracking
         * @param clickTracking Enable or disable click tracking for the domain. (optional)
         * @return UpdateExistingDomainRequestBuilder
         */
        public UpdateExistingDomainRequestBuilder clickTracking(Boolean clickTracking) {
            this.clickTracking = clickTracking;
            return this;
        }
        
        /**
         * Set openTracking
         * @param openTracking Enable or disable open tracking for the domain. (optional)
         * @return UpdateExistingDomainRequestBuilder
         */
        public UpdateExistingDomainRequestBuilder openTracking(Boolean openTracking) {
            this.openTracking = openTracking;
            return this;
        }
        
        /**
         * Build call for updateExistingDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateDomainOptions updateDomainOptions = buildBodyParams();
            return updateExistingDomainCall(domainId, updateDomainOptions, _callback);
        }

        private UpdateDomainOptions buildBodyParams() {
            UpdateDomainOptions updateDomainOptions = new UpdateDomainOptions();
            updateDomainOptions.clickTracking(this.clickTracking);
            updateDomainOptions.openTracking(this.openTracking);
            return updateDomainOptions;
        }

        /**
         * Execute updateExistingDomain request
         * @return UpdateDomainResponseSuccess
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public UpdateDomainResponseSuccess execute() throws ApiException {
            UpdateDomainOptions updateDomainOptions = buildBodyParams();
            ApiResponse<UpdateDomainResponseSuccess> localVarResp = updateExistingDomainWithHttpInfo(domainId, updateDomainOptions);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateExistingDomain request with HTTP info returned
         * @return ApiResponse&lt;UpdateDomainResponseSuccess&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateDomainResponseSuccess> executeWithHttpInfo() throws ApiException {
            UpdateDomainOptions updateDomainOptions = buildBodyParams();
            return updateExistingDomainWithHttpInfo(domainId, updateDomainOptions);
        }

        /**
         * Execute updateExistingDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateDomainResponseSuccess> _callback) throws ApiException {
            UpdateDomainOptions updateDomainOptions = buildBodyParams();
            return updateExistingDomainAsync(domainId, updateDomainOptions, _callback);
        }
    }

    /**
     * Update an existing domain
     * 
     * @param domainId  (required)
     * @return UpdateExistingDomainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingDomainRequestBuilder updateExistingDomain(String domainId) throws IllegalArgumentException {
        if (domainId == null) throw new IllegalArgumentException("\"domainId\" is required but got null");
            

        return new UpdateExistingDomainRequestBuilder(domainId);
    }
    private okhttp3.Call verifyDomainCall(String domainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{domain_id}/verify"
            .replace("{" + "domain_id" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyDomainValidateBeforeCall(String domainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling verifyDomain(Async)");
        }

        return verifyDomainCall(domainId, _callback);

    }


    private ApiResponse<VerifyDomainResponse> verifyDomainWithHttpInfo(String domainId) throws ApiException {
        okhttp3.Call localVarCall = verifyDomainValidateBeforeCall(domainId, null);
        Type localVarReturnType = new TypeToken<VerifyDomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyDomainAsync(String domainId, final ApiCallback<VerifyDomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyDomainValidateBeforeCall(domainId, _callback);
        Type localVarReturnType = new TypeToken<VerifyDomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyDomainRequestBuilder {
        private final String domainId;

        private VerifyDomainRequestBuilder(String domainId) {
            this.domainId = domainId;
        }

        /**
         * Build call for verifyDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return verifyDomainCall(domainId, _callback);
        }


        /**
         * Execute verifyDomain request
         * @return VerifyDomainResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public VerifyDomainResponse execute() throws ApiException {
            ApiResponse<VerifyDomainResponse> localVarResp = verifyDomainWithHttpInfo(domainId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyDomain request with HTTP info returned
         * @return ApiResponse&lt;VerifyDomainResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VerifyDomainResponse> executeWithHttpInfo() throws ApiException {
            return verifyDomainWithHttpInfo(domainId);
        }

        /**
         * Execute verifyDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VerifyDomainResponse> _callback) throws ApiException {
            return verifyDomainAsync(domainId, _callback);
        }
    }

    /**
     * Verify an existing domain
     * 
     * @param domainId  (required)
     * @return VerifyDomainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VerifyDomainRequestBuilder verifyDomain(String domainId) throws IllegalArgumentException {
        if (domainId == null) throw new IllegalArgumentException("\"domainId\" is required but got null");
            

        return new VerifyDomainRequestBuilder(domainId);
    }
}
