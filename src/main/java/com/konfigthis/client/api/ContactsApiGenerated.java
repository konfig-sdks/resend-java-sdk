/*
 * Resend
 * Resend is the email platform for developers.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateContactOptions;
import com.konfigthis.client.model.CreateContactResponseSuccess;
import com.konfigthis.client.model.GetContactResponseSuccess;
import com.konfigthis.client.model.ListContactsResponseSuccess;
import com.konfigthis.client.model.RemoveContactResponseSuccess;
import com.konfigthis.client.model.UpdateContactOptions;
import com.konfigthis.client.model.UpdateContactResponseSuccess;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContactsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContactsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ContactsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewContactCall(String audienceId, CreateContactOptions createContactOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createContactOptions;

        // create path and map variables
        String localVarPath = "/audiences/{audience_id}/contacts"
            .replace("{" + "audience_id" + "}", localVarApiClient.escapeString(audienceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewContactValidateBeforeCall(String audienceId, CreateContactOptions createContactOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException("Missing the required parameter 'audienceId' when calling createNewContact(Async)");
        }

        return createNewContactCall(audienceId, createContactOptions, _callback);

    }


    private ApiResponse<CreateContactResponseSuccess> createNewContactWithHttpInfo(String audienceId, CreateContactOptions createContactOptions) throws ApiException {
        okhttp3.Call localVarCall = createNewContactValidateBeforeCall(audienceId, createContactOptions, null);
        Type localVarReturnType = new TypeToken<CreateContactResponseSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewContactAsync(String audienceId, CreateContactOptions createContactOptions, final ApiCallback<CreateContactResponseSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewContactValidateBeforeCall(audienceId, createContactOptions, _callback);
        Type localVarReturnType = new TypeToken<CreateContactResponseSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewContactRequestBuilder {
        private final String email;
        private final String audienceId;
        private String firstName;
        private String lastName;
        private Boolean unsubscribed;
        private String audienceId;

        private CreateNewContactRequestBuilder(String email, String audienceId) {
            this.email = email;
            this.audienceId = audienceId;
        }

        /**
         * Set firstName
         * @param firstName First name of the contact. (optional)
         * @return CreateNewContactRequestBuilder
         */
        public CreateNewContactRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName Last name of the contact. (optional)
         * @return CreateNewContactRequestBuilder
         */
        public CreateNewContactRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set unsubscribed
         * @param unsubscribed Indicates if the contact is unsubscribed. (optional)
         * @return CreateNewContactRequestBuilder
         */
        public CreateNewContactRequestBuilder unsubscribed(Boolean unsubscribed) {
            this.unsubscribed = unsubscribed;
            return this;
        }
        
        /**
         * Set audienceId
         * @param audienceId Unique identifier of the audience to which the contact belongs. (optional)
         * @return CreateNewContactRequestBuilder
         */
        public CreateNewContactRequestBuilder audienceId(String audienceId) {
            this.audienceId = audienceId;
            return this;
        }
        
        /**
         * Build call for createNewContact
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateContactOptions createContactOptions = buildBodyParams();
            return createNewContactCall(audienceId, createContactOptions, _callback);
        }

        private CreateContactOptions buildBodyParams() {
            CreateContactOptions createContactOptions = new CreateContactOptions();
            createContactOptions.email(this.email);
            createContactOptions.firstName(this.firstName);
            createContactOptions.lastName(this.lastName);
            createContactOptions.unsubscribed(this.unsubscribed);
            createContactOptions.audienceId(this.audienceId);
            return createContactOptions;
        }

        /**
         * Execute createNewContact request
         * @return CreateContactResponseSuccess
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CreateContactResponseSuccess execute() throws ApiException {
            CreateContactOptions createContactOptions = buildBodyParams();
            ApiResponse<CreateContactResponseSuccess> localVarResp = createNewContactWithHttpInfo(audienceId, createContactOptions);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewContact request with HTTP info returned
         * @return ApiResponse&lt;CreateContactResponseSuccess&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateContactResponseSuccess> executeWithHttpInfo() throws ApiException {
            CreateContactOptions createContactOptions = buildBodyParams();
            return createNewContactWithHttpInfo(audienceId, createContactOptions);
        }

        /**
         * Execute createNewContact request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateContactResponseSuccess> _callback) throws ApiException {
            CreateContactOptions createContactOptions = buildBodyParams();
            return createNewContactAsync(audienceId, createContactOptions, _callback);
        }
    }

    /**
     * Create a new contact
     * 
     * @param audienceId  (required)
     * @return CreateNewContactRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewContactRequestBuilder createNewContact(String email, String audienceId) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (audienceId == null) throw new IllegalArgumentException("\"audienceId\" is required but got null");
            

        return new CreateNewContactRequestBuilder(email, audienceId);
    }
    private okhttp3.Call getListCall(String audienceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audiences/{audience_id}/contacts"
            .replace("{" + "audience_id" + "}", localVarApiClient.escapeString(audienceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(String audienceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException("Missing the required parameter 'audienceId' when calling getList(Async)");
        }

        return getListCall(audienceId, _callback);

    }


    private ApiResponse<ListContactsResponseSuccess> getListWithHttpInfo(String audienceId) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(audienceId, null);
        Type localVarReturnType = new TypeToken<ListContactsResponseSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(String audienceId, final ApiCallback<ListContactsResponseSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(audienceId, _callback);
        Type localVarReturnType = new TypeToken<ListContactsResponseSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private final String audienceId;

        private GetListRequestBuilder(String audienceId) {
            this.audienceId = audienceId;
        }

        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(audienceId, _callback);
        }


        /**
         * Execute getList request
         * @return ListContactsResponseSuccess
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ListContactsResponseSuccess execute() throws ApiException {
            ApiResponse<ListContactsResponseSuccess> localVarResp = getListWithHttpInfo(audienceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;ListContactsResponseSuccess&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListContactsResponseSuccess> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(audienceId);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListContactsResponseSuccess> _callback) throws ApiException {
            return getListAsync(audienceId, _callback);
        }
    }

    /**
     * Retrieve a list of contacts
     * 
     * @param audienceId  (required)
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList(String audienceId) throws IllegalArgumentException {
        if (audienceId == null) throw new IllegalArgumentException("\"audienceId\" is required but got null");
            

        return new GetListRequestBuilder(audienceId);
    }
    private okhttp3.Call getSingleCall(String id, String audienceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audiences/{audience_id}/contacts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "audience_id" + "}", localVarApiClient.escapeString(audienceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleValidateBeforeCall(String id, String audienceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSingle(Async)");
        }

        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException("Missing the required parameter 'audienceId' when calling getSingle(Async)");
        }

        return getSingleCall(id, audienceId, _callback);

    }


    private ApiResponse<GetContactResponseSuccess> getSingleWithHttpInfo(String id, String audienceId) throws ApiException {
        okhttp3.Call localVarCall = getSingleValidateBeforeCall(id, audienceId, null);
        Type localVarReturnType = new TypeToken<GetContactResponseSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleAsync(String id, String audienceId, final ApiCallback<GetContactResponseSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleValidateBeforeCall(id, audienceId, _callback);
        Type localVarReturnType = new TypeToken<GetContactResponseSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleRequestBuilder {
        private final String id;
        private final String audienceId;

        private GetSingleRequestBuilder(String id, String audienceId) {
            this.id = id;
            this.audienceId = audienceId;
        }

        /**
         * Build call for getSingle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCall(id, audienceId, _callback);
        }


        /**
         * Execute getSingle request
         * @return GetContactResponseSuccess
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GetContactResponseSuccess execute() throws ApiException {
            ApiResponse<GetContactResponseSuccess> localVarResp = getSingleWithHttpInfo(id, audienceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingle request with HTTP info returned
         * @return ApiResponse&lt;GetContactResponseSuccess&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetContactResponseSuccess> executeWithHttpInfo() throws ApiException {
            return getSingleWithHttpInfo(id, audienceId);
        }

        /**
         * Execute getSingle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetContactResponseSuccess> _callback) throws ApiException {
            return getSingleAsync(id, audienceId, _callback);
        }
    }

    /**
     * Retrieve a single contact
     * 
     * @param id  (required)
     * @param audienceId  (required)
     * @return GetSingleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleRequestBuilder getSingle(String id, String audienceId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (audienceId == null) throw new IllegalArgumentException("\"audienceId\" is required but got null");
            

        return new GetSingleRequestBuilder(id, audienceId);
    }
    private okhttp3.Call removeByEmailCall(String email, String audienceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audiences/{audience_id}/contacts/{email}"
            .replace("{" + "email" + "}", localVarApiClient.escapeString(email.toString()))
            .replace("{" + "audience_id" + "}", localVarApiClient.escapeString(audienceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByEmailValidateBeforeCall(String email, String audienceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling removeByEmail(Async)");
        }

        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException("Missing the required parameter 'audienceId' when calling removeByEmail(Async)");
        }

        return removeByEmailCall(email, audienceId, _callback);

    }


    private ApiResponse<RemoveContactResponseSuccess> removeByEmailWithHttpInfo(String email, String audienceId) throws ApiException {
        okhttp3.Call localVarCall = removeByEmailValidateBeforeCall(email, audienceId, null);
        Type localVarReturnType = new TypeToken<RemoveContactResponseSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeByEmailAsync(String email, String audienceId, final ApiCallback<RemoveContactResponseSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByEmailValidateBeforeCall(email, audienceId, _callback);
        Type localVarReturnType = new TypeToken<RemoveContactResponseSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveByEmailRequestBuilder {
        private final String email;
        private final String audienceId;

        private RemoveByEmailRequestBuilder(String email, String audienceId) {
            this.email = email;
            this.audienceId = audienceId;
        }

        /**
         * Build call for removeByEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByEmailCall(email, audienceId, _callback);
        }


        /**
         * Execute removeByEmail request
         * @return RemoveContactResponseSuccess
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public RemoveContactResponseSuccess execute() throws ApiException {
            ApiResponse<RemoveContactResponseSuccess> localVarResp = removeByEmailWithHttpInfo(email, audienceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeByEmail request with HTTP info returned
         * @return ApiResponse&lt;RemoveContactResponseSuccess&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RemoveContactResponseSuccess> executeWithHttpInfo() throws ApiException {
            return removeByEmailWithHttpInfo(email, audienceId);
        }

        /**
         * Execute removeByEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RemoveContactResponseSuccess> _callback) throws ApiException {
            return removeByEmailAsync(email, audienceId, _callback);
        }
    }

    /**
     * Remove an existing contact by email
     * 
     * @param email  (required)
     * @param audienceId  (required)
     * @return RemoveByEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByEmailRequestBuilder removeByEmail(String email, String audienceId) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (audienceId == null) throw new IllegalArgumentException("\"audienceId\" is required but got null");
            

        return new RemoveByEmailRequestBuilder(email, audienceId);
    }
    private okhttp3.Call removeByIdCall(String id, String audienceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audiences/{audience_id}/contacts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "audience_id" + "}", localVarApiClient.escapeString(audienceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String id, String audienceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeById(Async)");
        }

        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException("Missing the required parameter 'audienceId' when calling removeById(Async)");
        }

        return removeByIdCall(id, audienceId, _callback);

    }


    private ApiResponse<RemoveContactResponseSuccess> removeByIdWithHttpInfo(String id, String audienceId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, audienceId, null);
        Type localVarReturnType = new TypeToken<RemoveContactResponseSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeByIdAsync(String id, String audienceId, final ApiCallback<RemoveContactResponseSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, audienceId, _callback);
        Type localVarReturnType = new TypeToken<RemoveContactResponseSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String id;
        private final String audienceId;

        private RemoveByIdRequestBuilder(String id, String audienceId) {
            this.id = id;
            this.audienceId = audienceId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(id, audienceId, _callback);
        }


        /**
         * Execute removeById request
         * @return RemoveContactResponseSuccess
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public RemoveContactResponseSuccess execute() throws ApiException {
            ApiResponse<RemoveContactResponseSuccess> localVarResp = removeByIdWithHttpInfo(id, audienceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;RemoveContactResponseSuccess&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RemoveContactResponseSuccess> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(id, audienceId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RemoveContactResponseSuccess> _callback) throws ApiException {
            return removeByIdAsync(id, audienceId, _callback);
        }
    }

    /**
     * Remove an existing contact by id
     * 
     * @param id  (required)
     * @param audienceId  (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String id, String audienceId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (audienceId == null) throw new IllegalArgumentException("\"audienceId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(id, audienceId);
    }
    private okhttp3.Call updateSingleContactCall(String id, String audienceId, UpdateContactOptions updateContactOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateContactOptions;

        // create path and map variables
        String localVarPath = "/audiences/{audience_id}/contacts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "audience_id" + "}", localVarApiClient.escapeString(audienceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSingleContactValidateBeforeCall(String id, String audienceId, UpdateContactOptions updateContactOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSingleContact(Async)");
        }

        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException("Missing the required parameter 'audienceId' when calling updateSingleContact(Async)");
        }

        return updateSingleContactCall(id, audienceId, updateContactOptions, _callback);

    }


    private ApiResponse<UpdateContactResponseSuccess> updateSingleContactWithHttpInfo(String id, String audienceId, UpdateContactOptions updateContactOptions) throws ApiException {
        okhttp3.Call localVarCall = updateSingleContactValidateBeforeCall(id, audienceId, updateContactOptions, null);
        Type localVarReturnType = new TypeToken<UpdateContactResponseSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSingleContactAsync(String id, String audienceId, UpdateContactOptions updateContactOptions, final ApiCallback<UpdateContactResponseSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSingleContactValidateBeforeCall(id, audienceId, updateContactOptions, _callback);
        Type localVarReturnType = new TypeToken<UpdateContactResponseSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSingleContactRequestBuilder {
        private final String id;
        private final String audienceId;
        private String email;
        private String firstName;
        private String lastName;
        private Boolean unsubscribed;

        private UpdateSingleContactRequestBuilder(String id, String audienceId) {
            this.id = id;
            this.audienceId = audienceId;
        }

        /**
         * Set email
         * @param email Email address of the contact. (optional)
         * @return UpdateSingleContactRequestBuilder
         */
        public UpdateSingleContactRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName First name of the contact. (optional)
         * @return UpdateSingleContactRequestBuilder
         */
        public UpdateSingleContactRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName Last name of the contact. (optional)
         * @return UpdateSingleContactRequestBuilder
         */
        public UpdateSingleContactRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set unsubscribed
         * @param unsubscribed Indicates the subscription status of the contact. (optional)
         * @return UpdateSingleContactRequestBuilder
         */
        public UpdateSingleContactRequestBuilder unsubscribed(Boolean unsubscribed) {
            this.unsubscribed = unsubscribed;
            return this;
        }
        
        /**
         * Build call for updateSingleContact
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateContactOptions updateContactOptions = buildBodyParams();
            return updateSingleContactCall(id, audienceId, updateContactOptions, _callback);
        }

        private UpdateContactOptions buildBodyParams() {
            UpdateContactOptions updateContactOptions = new UpdateContactOptions();
            updateContactOptions.email(this.email);
            updateContactOptions.firstName(this.firstName);
            updateContactOptions.lastName(this.lastName);
            updateContactOptions.unsubscribed(this.unsubscribed);
            return updateContactOptions;
        }

        /**
         * Execute updateSingleContact request
         * @return UpdateContactResponseSuccess
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public UpdateContactResponseSuccess execute() throws ApiException {
            UpdateContactOptions updateContactOptions = buildBodyParams();
            ApiResponse<UpdateContactResponseSuccess> localVarResp = updateSingleContactWithHttpInfo(id, audienceId, updateContactOptions);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSingleContact request with HTTP info returned
         * @return ApiResponse&lt;UpdateContactResponseSuccess&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateContactResponseSuccess> executeWithHttpInfo() throws ApiException {
            UpdateContactOptions updateContactOptions = buildBodyParams();
            return updateSingleContactWithHttpInfo(id, audienceId, updateContactOptions);
        }

        /**
         * Execute updateSingleContact request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateContactResponseSuccess> _callback) throws ApiException {
            UpdateContactOptions updateContactOptions = buildBodyParams();
            return updateSingleContactAsync(id, audienceId, updateContactOptions, _callback);
        }
    }

    /**
     * Update a single contact
     * 
     * @param id  (required)
     * @param audienceId  (required)
     * @return UpdateSingleContactRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSingleContactRequestBuilder updateSingleContact(String id, String audienceId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (audienceId == null) throw new IllegalArgumentException("\"audienceId\" is required but got null");
            

        return new UpdateSingleContactRequestBuilder(id, audienceId);
    }
}
