/*
 * Resend
 * Resend is the email platform for developers.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Attachment;
import com.konfigthis.client.model.CreateBatchEmailsResponse;
import com.konfigthis.client.model.Email;
import com.konfigthis.client.model.SendEmailRequest;
import com.konfigthis.client.model.SendEmailResponse;
import com.konfigthis.client.model.Tag;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmailsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmailsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmailsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getSingleEmailCall(String emailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{email_id}"
            .replace("{" + "email_id" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleEmailValidateBeforeCall(String emailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getSingleEmail(Async)");
        }

        return getSingleEmailCall(emailId, _callback);

    }


    private ApiResponse<Email> getSingleEmailWithHttpInfo(String emailId) throws ApiException {
        okhttp3.Call localVarCall = getSingleEmailValidateBeforeCall(emailId, null);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleEmailAsync(String emailId, final ApiCallback<Email> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleEmailValidateBeforeCall(emailId, _callback);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleEmailRequestBuilder {
        private final String emailId;

        private GetSingleEmailRequestBuilder(String emailId) {
            this.emailId = emailId;
        }

        /**
         * Build call for getSingleEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleEmailCall(emailId, _callback);
        }


        /**
         * Execute getSingleEmail request
         * @return Email
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Email execute() throws ApiException {
            ApiResponse<Email> localVarResp = getSingleEmailWithHttpInfo(emailId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleEmail request with HTTP info returned
         * @return ApiResponse&lt;Email&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Email> executeWithHttpInfo() throws ApiException {
            return getSingleEmailWithHttpInfo(emailId);
        }

        /**
         * Execute getSingleEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Email> _callback) throws ApiException {
            return getSingleEmailAsync(emailId, _callback);
        }
    }

    /**
     * Retrieve a single email
     * 
     * @param emailId  (required)
     * @return GetSingleEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleEmailRequestBuilder getSingleEmail(String emailId) throws IllegalArgumentException {
        if (emailId == null) throw new IllegalArgumentException("\"emailId\" is required but got null");
            

        return new GetSingleEmailRequestBuilder(emailId);
    }
    private okhttp3.Call sendEmailCall(SendEmailRequest sendEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendEmailRequest;

        // create path and map variables
        String localVarPath = "/emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendEmailValidateBeforeCall(SendEmailRequest sendEmailRequest, final ApiCallback _callback) throws ApiException {
        return sendEmailCall(sendEmailRequest, _callback);

    }


    private ApiResponse<SendEmailResponse> sendEmailWithHttpInfo(SendEmailRequest sendEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = sendEmailValidateBeforeCall(sendEmailRequest, null);
        Type localVarReturnType = new TypeToken<SendEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendEmailAsync(SendEmailRequest sendEmailRequest, final ApiCallback<SendEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendEmailValidateBeforeCall(sendEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<SendEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendEmailRequestBuilder {
        private final String from;
        private final List<String> to;
        private final String subject;
        private List<Tag> tags;
        private String bcc;
        private String cc;
        private String replyTo;
        private String html;
        private String text;
        private Object headers;
        private List<Attachment> attachments;

        private SendEmailRequestBuilder(String from, List<String> to, String subject) {
            this.from = from;
            this.to = to;
            this.subject = subject;
        }

        /**
         * Set tags
         * @param tags  (optional)
         * @return SendEmailRequestBuilder
         */
        public SendEmailRequestBuilder tags(List<Tag> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set bcc
         * @param bcc Bcc recipient email address. For multiple addresses, send as an array of strings. (optional)
         * @return SendEmailRequestBuilder
         */
        public SendEmailRequestBuilder bcc(String bcc) {
            this.bcc = bcc;
            return this;
        }
        
        /**
         * Set cc
         * @param cc Cc recipient email address. For multiple addresses, send as an array of strings. (optional)
         * @return SendEmailRequestBuilder
         */
        public SendEmailRequestBuilder cc(String cc) {
            this.cc = cc;
            return this;
        }
        
        /**
         * Set replyTo
         * @param replyTo Reply-to email address. For multiple addresses, send as an array of strings. (optional)
         * @return SendEmailRequestBuilder
         */
        public SendEmailRequestBuilder replyTo(String replyTo) {
            this.replyTo = replyTo;
            return this;
        }
        
        /**
         * Set html
         * @param html The HTML version of the message. (optional)
         * @return SendEmailRequestBuilder
         */
        public SendEmailRequestBuilder html(String html) {
            this.html = html;
            return this;
        }
        
        /**
         * Set text
         * @param text The plain text version of the message. (optional)
         * @return SendEmailRequestBuilder
         */
        public SendEmailRequestBuilder text(String text) {
            this.text = text;
            return this;
        }
        
        /**
         * Set headers
         * @param headers Custom headers to add to the email. (optional)
         * @return SendEmailRequestBuilder
         */
        public SendEmailRequestBuilder headers(Object headers) {
            this.headers = headers;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments  (optional)
         * @return SendEmailRequestBuilder
         */
        public SendEmailRequestBuilder attachments(List<Attachment> attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Build call for sendEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SendEmailRequest sendEmailRequest = buildBodyParams();
            return sendEmailCall(sendEmailRequest, _callback);
        }

        private SendEmailRequest buildBodyParams() {
            SendEmailRequest sendEmailRequest = new SendEmailRequest();
            sendEmailRequest.tags(this.tags);
            sendEmailRequest.from(this.from);
            sendEmailRequest.to(this.to);
            sendEmailRequest.subject(this.subject);
            sendEmailRequest.bcc(this.bcc);
            sendEmailRequest.cc(this.cc);
            sendEmailRequest.replyTo(this.replyTo);
            sendEmailRequest.html(this.html);
            sendEmailRequest.text(this.text);
            sendEmailRequest.headers(this.headers);
            sendEmailRequest.attachments(this.attachments);
            return sendEmailRequest;
        }

        /**
         * Execute sendEmail request
         * @return SendEmailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public SendEmailResponse execute() throws ApiException {
            SendEmailRequest sendEmailRequest = buildBodyParams();
            ApiResponse<SendEmailResponse> localVarResp = sendEmailWithHttpInfo(sendEmailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendEmail request with HTTP info returned
         * @return ApiResponse&lt;SendEmailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SendEmailResponse> executeWithHttpInfo() throws ApiException {
            SendEmailRequest sendEmailRequest = buildBodyParams();
            return sendEmailWithHttpInfo(sendEmailRequest);
        }

        /**
         * Execute sendEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SendEmailResponse> _callback) throws ApiException {
            SendEmailRequest sendEmailRequest = buildBodyParams();
            return sendEmailAsync(sendEmailRequest, _callback);
        }
    }

    /**
     * Send an email
     * 
     * @return SendEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SendEmailRequestBuilder sendEmail(String from, List<String> to, String subject) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
            

        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
        if (subject == null) throw new IllegalArgumentException("\"subject\" is required but got null");
            

        return new SendEmailRequestBuilder(from, to, subject);
    }
    private okhttp3.Call triggerBatchEmailsCall(List<SendEmailRequest> sendEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendEmailRequest;

        // create path and map variables
        String localVarPath = "/emails/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggerBatchEmailsValidateBeforeCall(List<SendEmailRequest> sendEmailRequest, final ApiCallback _callback) throws ApiException {
        return triggerBatchEmailsCall(sendEmailRequest, _callback);

    }


    private ApiResponse<CreateBatchEmailsResponse> triggerBatchEmailsWithHttpInfo(List<SendEmailRequest> sendEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = triggerBatchEmailsValidateBeforeCall(sendEmailRequest, null);
        Type localVarReturnType = new TypeToken<CreateBatchEmailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call triggerBatchEmailsAsync(List<SendEmailRequest> sendEmailRequest, final ApiCallback<CreateBatchEmailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggerBatchEmailsValidateBeforeCall(sendEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateBatchEmailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TriggerBatchEmailsRequestBuilder {
        private List<SendEmailRequest> sendEmailRequest;

        private TriggerBatchEmailsRequestBuilder() {
        }

        /**
         * Set sendEmailRequest
         * @param sendEmailRequest  (optional)
         * @return TriggerBatchEmailsRequestBuilder
         */
        public TriggerBatchEmailsRequestBuilder sendEmailRequest(List<SendEmailRequest> sendEmailRequest) {
            this.sendEmailRequest = sendEmailRequest;
            return this;
        }

        /**
         * Build call for triggerBatchEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<SendEmailRequest> sendEmailRequest = buildBodyParams();
            return triggerBatchEmailsCall(sendEmailRequest, _callback);
        }

        private List<SendEmailRequest> buildBodyParams() {
            return this.sendEmailRequest;
        }

        /**
         * Execute triggerBatchEmails request
         * @return CreateBatchEmailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CreateBatchEmailsResponse execute() throws ApiException {
            List<SendEmailRequest> sendEmailRequest = buildBodyParams();
            ApiResponse<CreateBatchEmailsResponse> localVarResp = triggerBatchEmailsWithHttpInfo(sendEmailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute triggerBatchEmails request with HTTP info returned
         * @return ApiResponse&lt;CreateBatchEmailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateBatchEmailsResponse> executeWithHttpInfo() throws ApiException {
            List<SendEmailRequest> sendEmailRequest = buildBodyParams();
            return triggerBatchEmailsWithHttpInfo(sendEmailRequest);
        }

        /**
         * Execute triggerBatchEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateBatchEmailsResponse> _callback) throws ApiException {
            List<SendEmailRequest> sendEmailRequest = buildBodyParams();
            return triggerBatchEmailsAsync(sendEmailRequest, _callback);
        }
    }

    /**
     * Trigger up to 100 batch emails at once.
     * 
     * @return TriggerBatchEmailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TriggerBatchEmailsRequestBuilder triggerBatchEmails() throws IllegalArgumentException {
        return new TriggerBatchEmailsRequestBuilder();
    }
}
