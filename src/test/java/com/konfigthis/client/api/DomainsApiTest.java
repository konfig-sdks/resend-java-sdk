/*
 * Resend
 * Resend is the email platform for developers.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateDomainRequest;
import com.konfigthis.client.model.CreateDomainResponse;
import com.konfigthis.client.model.DeleteDomainResponse;
import com.konfigthis.client.model.Domain;
import com.konfigthis.client.model.ListDomainsResponse;
import com.konfigthis.client.model.UpdateDomainOptions;
import com.konfigthis.client.model.UpdateDomainResponseSuccess;
import com.konfigthis.client.model.VerifyDomainResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DomainsApi
 */
@Disabled
public class DomainsApiTest {

    private static DomainsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new DomainsApi(apiClient);
    }

    /**
     * Create a new domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewDomainTest() throws ApiException {
        String name = null;
        String region = null;
        CreateDomainResponse response = api.createNewDomain(name)
                .region(region)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a list of domains
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListTest() throws ApiException {
        ListDomainsResponse response = api.getList()
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a single domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleDomainTest() throws ApiException {
        String domainId = null;
        Domain response = api.getSingleDomain(domainId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove an existing domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeDomainTest() throws ApiException {
        String domainId = null;
        DeleteDomainResponse response = api.removeDomain(domainId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExistingDomainTest() throws ApiException {
        String domainId = null;
        Boolean clickTracking = null;
        Boolean openTracking = null;
        UpdateDomainResponseSuccess response = api.updateExistingDomain(domainId)
                .clickTracking(clickTracking)
                .openTracking(openTracking)
                .execute();
        // TODO: test validations
    }

    /**
     * Verify an existing domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyDomainTest() throws ApiException {
        String domainId = null;
        VerifyDomainResponse response = api.verifyDomain(domainId)
                .execute();
        // TODO: test validations
    }

}
