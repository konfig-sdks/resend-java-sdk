/*
 * Resend
 * Resend is the email platform for developers.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateApiKeyRequest;
import com.konfigthis.client.model.CreateApiKeyResponse;
import com.konfigthis.client.model.ListApiKeysResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApiKeysApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApiKeysApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ApiKeysApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewKeyCall(CreateApiKeyRequest createApiKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createApiKeyRequest;

        // create path and map variables
        String localVarPath = "/api-keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewKeyValidateBeforeCall(CreateApiKeyRequest createApiKeyRequest, final ApiCallback _callback) throws ApiException {
        return createNewKeyCall(createApiKeyRequest, _callback);

    }


    private ApiResponse<CreateApiKeyResponse> createNewKeyWithHttpInfo(CreateApiKeyRequest createApiKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewKeyValidateBeforeCall(createApiKeyRequest, null);
        Type localVarReturnType = new TypeToken<CreateApiKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewKeyAsync(CreateApiKeyRequest createApiKeyRequest, final ApiCallback<CreateApiKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewKeyValidateBeforeCall(createApiKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateApiKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewKeyRequestBuilder {
        private final String name;
        private String permission;
        private String domainId;

        private CreateNewKeyRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set permission
         * @param permission The API key can have full access to Resendâ€™s API or be only restricted to send emails. * full_access - Can create, delete, get, and update any resource. * sending_access - Can only send emails. (optional)
         * @return CreateNewKeyRequestBuilder
         */
        public CreateNewKeyRequestBuilder permission(String permission) {
            this.permission = permission;
            return this;
        }
        
        /**
         * Set domainId
         * @param domainId Restrict an API key to send emails only from a specific domain. Only used when the permission is sending_acces. (optional)
         * @return CreateNewKeyRequestBuilder
         */
        public CreateNewKeyRequestBuilder domainId(String domainId) {
            this.domainId = domainId;
            return this;
        }
        
        /**
         * Build call for createNewKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateApiKeyRequest createApiKeyRequest = buildBodyParams();
            return createNewKeyCall(createApiKeyRequest, _callback);
        }

        private CreateApiKeyRequest buildBodyParams() {
            CreateApiKeyRequest createApiKeyRequest = new CreateApiKeyRequest();
            createApiKeyRequest.name(this.name);
            if (this.permission != null)
            createApiKeyRequest.permission(CreateApiKeyRequest.PermissionEnum.fromValue(this.permission));
            createApiKeyRequest.domainId(this.domainId);
            return createApiKeyRequest;
        }

        /**
         * Execute createNewKey request
         * @return CreateApiKeyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CreateApiKeyResponse execute() throws ApiException {
            CreateApiKeyRequest createApiKeyRequest = buildBodyParams();
            ApiResponse<CreateApiKeyResponse> localVarResp = createNewKeyWithHttpInfo(createApiKeyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewKey request with HTTP info returned
         * @return ApiResponse&lt;CreateApiKeyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateApiKeyResponse> executeWithHttpInfo() throws ApiException {
            CreateApiKeyRequest createApiKeyRequest = buildBodyParams();
            return createNewKeyWithHttpInfo(createApiKeyRequest);
        }

        /**
         * Execute createNewKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateApiKeyResponse> _callback) throws ApiException {
            CreateApiKeyRequest createApiKeyRequest = buildBodyParams();
            return createNewKeyAsync(createApiKeyRequest, _callback);
        }
    }

    /**
     * Create a new API key
     * 
     * @return CreateNewKeyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewKeyRequestBuilder createNewKey(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateNewKeyRequestBuilder(name);
    }
    private okhttp3.Call getListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getListCall(_callback);

    }


    private ApiResponse<ListApiKeysResponse> getListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListApiKeysResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(final ApiCallback<ListApiKeysResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListApiKeysResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {

        private GetListRequestBuilder() {
        }

        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(_callback);
        }


        /**
         * Execute getList request
         * @return ListApiKeysResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ListApiKeysResponse execute() throws ApiException {
            ApiResponse<ListApiKeysResponse> localVarResp = getListWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;ListApiKeysResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListApiKeysResponse> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo();
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListApiKeysResponse> _callback) throws ApiException {
            return getListAsync(_callback);
        }
    }

    /**
     * Retrieve a list of API keys
     * 
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList() throws IllegalArgumentException {
        return new GetListRequestBuilder();
    }
    private okhttp3.Call removeExistingKeyCall(String apiKeyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-keys/{api_key_id}"
            .replace("{" + "api_key_id" + "}", localVarApiClient.escapeString(apiKeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeExistingKeyValidateBeforeCall(String apiKeyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKeyId' is set
        if (apiKeyId == null) {
            throw new ApiException("Missing the required parameter 'apiKeyId' when calling removeExistingKey(Async)");
        }

        return removeExistingKeyCall(apiKeyId, _callback);

    }


    private ApiResponse<Void> removeExistingKeyWithHttpInfo(String apiKeyId) throws ApiException {
        okhttp3.Call localVarCall = removeExistingKeyValidateBeforeCall(apiKeyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeExistingKeyAsync(String apiKeyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeExistingKeyValidateBeforeCall(apiKeyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveExistingKeyRequestBuilder {
        private final String apiKeyId;

        private RemoveExistingKeyRequestBuilder(String apiKeyId) {
            this.apiKeyId = apiKeyId;
        }

        /**
         * Build call for removeExistingKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeExistingKeyCall(apiKeyId, _callback);
        }


        /**
         * Execute removeExistingKey request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeExistingKeyWithHttpInfo(apiKeyId);
        }

        /**
         * Execute removeExistingKey request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeExistingKeyWithHttpInfo(apiKeyId);
        }

        /**
         * Execute removeExistingKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeExistingKeyAsync(apiKeyId, _callback);
        }
    }

    /**
     * Remove an existing API key
     * 
     * @param apiKeyId  (required)
     * @return RemoveExistingKeyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RemoveExistingKeyRequestBuilder removeExistingKey(String apiKeyId) throws IllegalArgumentException {
        if (apiKeyId == null) throw new IllegalArgumentException("\"apiKeyId\" is required but got null");
            

        return new RemoveExistingKeyRequestBuilder(apiKeyId);
    }
}
